all_sites <- read.csv("clean_sites.csv")
all_sites <- st_as_sf(all_sites, coords = c("lon","lat"), crs = 4269)
library(dplyr)
library(stars)
library(sf)
library(soilDB)
library(sf)
library(ggplot2)
library(rnaturalearth)
library(rnaturalearthdata)
all_sites <- read.csv("clean_sites.csv")
all_sites <- st_as_sf(all_sites, coords = c("lon","lat"), crs = 4269)
all_sites <- read.csv("clean_sites.csv")
setwd("GitHub/soils_dailymt")
all_sites <- read.csv("clean_sites.csv")
all_sites <- st_as_sf(all_sites, coords = c("lon","lat"), crs = 4269)
View(all_sites)
##################################################
library(lubridate)
View(all_sites)
all_sites$year[all_sites$ID == "LCP_CCLONES1_Rey"] <- 2002
View(all_sites)
all_sites$Planted[all_sites$ID == "LCP_CCLONES1_Rey"] <- 2002
all_sites$Planted[all_sites$ID == "LCP_CCLONES1_BFG"] <- 2002
all_sites <- all_sites |>
select(-year)
all_sites$EndYear <- ifelse(!is.na(all_sites$Harvested), 2023, NA)
all_sites$Harvested(is.na(all_sites$Harvested), 2023, NA)
library(daymetr)
dir.create("DAYMET_saved", showWarnings = FALSE)
View(all_sites)
View(all_sites)
all_sites$Harvested <- ifelse(is.na(all_sites$Harvested), 2023, all_sites$Harvested)
all_sites <- all_sites |>
select(-EndYear)
library(dplyr)
all_sites <- all_sites |>
select(-EndYear)
library(daymetr)
library(daymetR)
require(devtools)
all_sites <- all_sites |>
select(-EndYear)
all_sites <- st_as_sf(all_sites, coords = c("lon","lat"), crs = 4269)
library(dplyr)
library(stars)
library(sf)
library(soilDB)
library(sf)
library(ggplot2)
library(rnaturalearth)
library(rnaturalearthdata)
all_sites <- st_as_sf(all_sites, coords = c("lon","lat"), crs = 4269)
all_sites$Planted[all_sites$ID == "LCP_CCLONES1_Rey"] <- 2002
all_sites$Planted[all_sites$ID == "LCP_CCLONES1_Rey"] <- 2002
all_sites$Planted[all_sites$ID == "LCP_CCLONES1_BFG"] <- 2002
all_sites$Harvested <- ifelse(is.na(all_sites$Harvested), 2023, all_sites$Harvested)
dir.create("DAYMET_saved", showWarnings = FALSE)
df <- all_sites |>
filter(ID == "LCP_PPINE_San_D")
View(df)
all_sites <- read.csv("clean_sites.csv")
View(all_sites)
all_sites <- read.csv("clean_sites.csv")
all_sites$Planted[all_sites$ID == "LCP_CCLONES1_Rey"] <- 2002
all_sites$Planted[all_sites$ID == "LCP_CCLONES1_BFG"] <- 2002
all_sites$Harvested <- ifelse(is.na(all_sites$Harvested), 2023, all_sites$Harvested)
all_sites <- all_sites |>
select(-Series,-Soil.type.and.or.CRIFF.series)
df <- all_sites |>
filter(ID == "LCP_PPINE_San_D")
dir.create("DAYMET_saved", showWarnings = FALSE)
for (i in 1:nrow(df)) {
site_name <- df$ID[i]
lat <- df$lat[i]
lon <- df$lon[i]
start_year <- df$Planted[i]
end_year <- df$Harvested[i]
# Only run if both years are not missing
if (!is.na(start_year) && !is.na(end_year)) {
# Download and save the data to disk
download_daymet(
site = site_name,
lat = lat,
lon = lon,
start = start_year,
end = end_year,
path = "DAYMET_saved",     # folder to save files
internal = FALSE             # FALSE = save as .csv, not returned to R
)
print(paste("Downloaded:", site_name))
} else {
print(paste("Skipping:", site_name, "- missing year(s)"))
}
}
test <- read.csv("DAYMET_saved/LCP_PPINE_San_D_2000_2020.csv")
View(test)
df <- read.csv("daymet_by_site/LCP_CCLONES1_Rey_2002_2023.csv", skip = 7)
df <- all_sites |>
filter(ID == "LCP_PPINE_San_D")
t
test <- read.csv("daymet_by_site/LCP_CCLONES1_Rey_2002_2023.csv", skip = 7)
View(test)
test <- read.csv("DAYMET_saved/LCP_PPINE_San_D_2000_2020.csv", skip = 7)
View(test)
col(test)
test <- read.csv("DAYMET_saved/LCP_PPINE_San_D_2000_2020.csv", skip = 7,header = TRUE)
View(test)
test <- read.csv("DAYMET_saved/LCP_PPINE_San_D_2000_2020.csv", skip = 7, header = TRUE)
View(test)
colnames(test) <- c("year", "yday", "tmax", "tmin", "prcp", "srad", "vp", "swe", "dayl")
View(test)
readLines("daymet_by_site/LCP_CCLONES1_Rey_2002_2023.csv", 10)
readLines("DAYMET_saved//LCP_CCLONES1_Rey_2002_2023.csv", 10)
readLines("DAYMET_saved/LCP_CCLONES1_Rey_2002_2023.csv", 10)
testr <- read.csv("DAYMET_saved/LCP_PPINE_San_D_2000_2020.csv", skip = 7, header = TRUE)
View(testr)
testr <- read.csv("DAYMET_saved/LCP_PPINE_San_D_2000_2020.csv", skip = 7, header = FALSE)
View(test)
View(testr)
readLines("DAYMET_saved/LCP_PPINE_San_D_2000_2020.csv", 10)
test <- read.csv("DAYMET_saved/LCP_PPINE_San_D_2000_2020.csv", skip = 6, header = TRUE)
View(test)
df <- all_sites
for (i in 1:nrow(df)) {
site_name <- df$ID[i]
lat <- df$lat[i]
lon <- df$lon[i]
start_year <- df$Planted[i]
end_year <- df$Harvested[i]
# Only run if both years are not missing
if (!is.na(start_year) && !is.na(end_year)) {
# Download and save the data to disk
download_daymet(
site = site_name,
lat = lat,
lon = lon,
start = start_year,
end = end_year,
path = "DAYMET_saved",     # folder to save files
internal = FALSE             # FALSE = save as .csv, not returned to R
)
print(paste("Downloaded:", site_name))
} else {
print(paste("Skipping:", site_name, "- missing year(s)"))
}
}
files <- list.files("DAYMET_saved/", full.names = TRUE, pattern = "\\.csv$")
read_daymet <- function(filepath) {
df <- read.csv(filepath, skip = 6, header = TRUE)
colnames(df) <- c("year", "yday", "dayl", "prcp", "srad", "swe", "tmax", "tmin", "vp")
# Extract ID from filename
site_id <- gsub("_\\d{4}_\\d{4}\\.csv", "", basename(filepath))
df$ID <- site_id
return(df)
}
files <- list.files("DAYMET_saved", full.names = TRUE, pattern = "\\.csv$")
daymet_list <- lapply(files, read_daymet)
daymet_list <- lapply(files, read_daymet)
View(daymet_list)
names(daymet_list) <- site_ids
names(daymet_list) <- site_id
site_ids <- gsub("_\\d{4}_\\d{4}\\.csv", "", basename(files))
# 5. Name each element of the list by site ID
names(daymet_list) <- site_ids
# 6. (Optional) Combine all into one big data frame
daymet_all <- bind_rows(daymet_list)
View(daymet_all)
View(daymet_list)
View(daymet_list)
read_daymet <- function(filepath) {
df <- read.csv(filepath, skip = 6, header = TRUE)
# Extract ID from filename
site_id <- gsub("_\\d{4}_\\d{4}\\.csv", "", basename(filepath))
df$ID <- site_id
return(df)
}
files <- list.files("DAYMET_saved", full.names = TRUE, pattern = "\\.csv$")
site_ids <- gsub("_\\d{4}_\\d{4}\\.csv", "", basename(files))
daymet_list <- lapply(files, read_daymet)
# 5. Name each element of the list by site ID
names(daymet_list) <- site_ids
View(daymet_list)
View(daymet_list)
View(daymet_list)
library(data.table)
install.packages("data.table")
library(data.table)
library(dplyr)
library(daymetr)
library(data.table)
summarize_daymet_per_year <- function(dm) {
dm$svp.min <- 0.6108 * exp((17.27 * dm$tmin) / (273.3 + dm$tmin))
dm$svp.max <- 0.6108 * exp((17.27 * dm$tmax) / (273.3 + dm$tmax))
dm$vpd <- ((dm$svp.max + dm$svp.min) / 2) - (dm$vp / 1000)
dm$vpd <- ifelse(dm$vpd < 0, 0.000001, dm$vpd)
dm$vpdmx <- dm$svp.max - (dm$vp / 1000)
dm$vpdmx <- ifelse(dm$vpdmx <= 0, 0.000001, dm$vpdmx)
dm$tavg <- (dm$tmax + dm$tmin) / 2
# 5. Convert to data.table and summarize by year
dmdt <- data.table(dm)
summary <- dmdt[, .(
tavg = mean(tavg, na.rm = TRUE),
tmax = mean(tmax, na.rm = TRUE),
tmin = mean(tmin, na.rm = TRUE),
vpd = mean(vpd, na.rm = TRUE),
vpdmx = mean(vpdmx, na.rm = TRUE),
prcp = sum(prcp, na.rm = TRUE)
), by = .(year, ID)]
return(summary)
}
climate_summary_list <- lapply(daymet_list, summarize_daymet_per_year)
View(daymet_list)
summarize_daymet_per_year <- function(dm) {
required_cols <- c("tmin", "tmax", "vp", "prcp", "year", "ID")
# 1. Check for required columns
if (!all(required_cols %in% names(dm))) {
warning("Missing required columns in dataframe.")
return(NULL)
}
# 2. Check for empty data
if (nrow(dm) == 0 || all(is.na(dm$tmax)) || all(is.na(dm$tmin)) || all(is.na(dm$vp))) {
return(NULL)
}
# 3. Compute variables
dm$svp.min <- 0.6108 * exp((17.27 * dm$tmin) / (273.3 + dm$tmin))
dm$svp.max <- 0.6108 * exp((17.27 * dm$tmax) / (273.3 + dm$tmax))
dm$vpd <- ((dm$svp.max + dm$svp.min) / 2) - (dm$vp / 1000)
dm$vpd <- ifelse(dm$vpd < 0, 0.000001, dm$vpd)
dm$vpdmx <- dm$svp.max - (dm$vp / 1000)
dm$vpdmx <- ifelse(dm$vpdmx <= 0, 0.000001, dm$vpdmx)
dm$tavg <- (dm$tmax + dm$tmin) / 2
# 4. Summarize
dmdt <- data.table(dm)
summary <- dmdt[, .(
tavg = mean(tavg, na.rm = TRUE),
tmax = mean(tmax, na.rm = TRUE),
tmin = mean(tmin, na.rm = TRUE),
vpd = mean(vpd, na.rm = TRUE),
vpdmx = mean(vpdmx, na.rm = TRUE),
prcp = sum(prcp, na.rm = TRUE)
), by = .(year, ID)]
return(summary)
}
climate_summary_list <- lapply(daymet_list, summarize_daymet_per_year)
warnings()
View(climate_summary_list)
colnames_list <- lapply(daymet_list, colnames)
View(colnames_list)
names(colnames_list)  # shows the site IDs (if you named your list)
colnames_list[[1]]    # shows column names for the first data frame
daymet_all[[1]]
names(daymet_all[[1]])
colnames(daymet_all[1])
View(daymet_all)
colnames(daymet_list[[1]])
library(data.table)
summarize_daymet_per_year <- function(dm) {
required_cols <- c("tmin..deg.c.", "tmax..deg.c.", "vp..Pa.", "prcp..mm.day.", "year", "ID")
if (!all(required_cols %in% names(dm))) {
warning("Missing required columns.")
return(NULL)
}
if (nrow(dm) == 0 || all(is.na(dm$tmax..deg.c.)) || all(is.na(dm$tmin..deg.c.)) || all(is.na(dm$vp..Pa.))) {
return(NULL)
}
# Calculations
dm$svp.min <- 0.6108 * exp((17.27 * dm$tmin..deg.c.) / (273.3 + dm$tmin..deg.c.))
dm$svp.max <- 0.6108 * exp((17.27 * dm$tmax..deg.c.) / (273.3 + dm$tmax..deg.c.))
dm$vpd <- ((dm$svp.max + dm$svp.min) / 2) - (dm$vp..Pa. / 1000)
dm$vpd <- ifelse(dm$vpd < 0, 0.000001, dm$vpd)
dm$vpdmx <- dm$svp.max - (dm$vp..Pa. / 1000)
dm$vpdmx <- ifelse(dm$vpdmx <= 0, 0.000001, dm$vpdmx)
dm$tavg <- (dm$tmax..deg.c. + dm$tmin..deg.c.) / 2
dmdt <- data.table(dm)
summary <- dmdt[, .(
tavg = mean(tavg, na.rm = TRUE),
tmax = mean(tmax..deg.c., na.rm = TRUE),
tmin = mean(tmin..deg.c., na.rm = TRUE),
vpd = mean(vpd, na.rm = TRUE),
vpdmx = mean(vpdmx, na.rm = TRUE),
prcp = sum(prcp..mm.day., na.rm = TRUE)
), by = .(year, ID)]
return(summary)
}
climate_summary_list <- lapply(daymet_list, summarize_daymet_per_year)
climate_summary_list <- Filter(Negate(is.null), climate_summary_list)  # remove NULLs
climate_summary_all <- data.table::rbindlist(climate_summary_list)
View(climate_summary_all)
View(climate_summary_list)
View(climate_summary_list)
View(climate_summary_all)
climate_summary_list <- lapply(daymet_list, summarize_daymet_per_year)
climate_summary_all <- data.table::rbindlist(climate_summary_list)
View(climate_summary_all)
